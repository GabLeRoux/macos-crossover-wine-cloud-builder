name: Wine-Crossover-MacOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
    # avoid weird linker errors with Xcode 10 and later
    MACOSX_DEPLOYMENT_TARGET: 10.14
    # directories / files inside the downloaded tar file directory structure
    WINE_CONFIGURE: ${{ github.workspace }}/sources/wine/configure
    DXVK_BUILDSCRIPT: ${{ github.workspace }}/sources/dxvk/package-release.sh
    # build directories
    BUILDROOT: ${{ github.workspace }}/build
    LLVM_BUILDDIR: ${{ github.workspace }}/build/llvm
    CLANG_BUILDDIR: ${{ github.workspace }}/build/clang
    # target directory for installation
    INSTALLROOT: ${{ github.workspace }}/install
    TOOLS_INSTALLATION: build-tools-cx

jobs:
  llvm-clang:
    runs-on:  macos-10.15
    env:
      # crossover source code to be downloaded
      CROSS_OVER_SOURCE_URL: https://media.codeweavers.com/pub/crossover/source/crossover-sources-21.1.0.tar.gz
      CROSS_OVER_LOCAL_FILE: crossover-21.1.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      ############ Restore LLVM / Clang from cache ##############

      - name: Restore LLVM / Clang from cache
        uses: actions/cache@v2
        id: cache_llvm_clang
        with:
          path: ${{ env.INSTALLROOT }}/${{ env.TOOLS_INSTALLATION }}
          key: llvm_clang

      ############ Build LLVM / Clang (if restore from cache failed) ##############

      - name: Get and Extract Source
        if:  steps.cache_llvm_clang.outputs.cache-hit != 'true'
        run:  |
          curl -o ${{ env.CROSS_OVER_LOCAL_FILE }}.tar.gz ${{ env.CROSS_OVER_SOURCE_URL }}
          tar xf ${{ env.CROSS_OVER_LOCAL_FILE }}.tar.gz

      - name: Build / Install LLVM and Clang (if restore from cache failed)
        if:  steps.cache_llvm_clang.outputs.cache-hit != 'true'
        uses: ./.github/actions/build_llvm_clang
        with:
          install-prefix: ${{ env.INSTALLROOT }}/${{ env.TOOLS_INSTALLATION }}
          llvm-makedir: ${{ github.workspace }}/sources/clang/llvm
          clang-makedir: ${{ github.workspace }}/sources/clang/clang

      ############ Upload LLVM / Clang to be used in subsequent job steps ##############

      - name: Tar Build Tools
        run: |
          set -x
          pushd ${{ env.INSTALLROOT }}
          tar -czf ${{ env.TOOLS_INSTALLATION }}.tar.gz ${{ env.TOOLS_INSTALLATION }}
          ls -alt
          popd

      - name: Upload Build Tools
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TOOLS_INSTALLATION }}
          path: ${{ env.INSTALLROOT }}/${{ env.TOOLS_INSTALLATION }}.tar.gz

  wine-crossover:
    needs: llvm-clang

    strategy:
      fail-fast: false
      matrix:
        CROSS_OVER_VERSION: [21.1.0, 20.0.4, 19.0.2] # 21.0.0, 20.0.2, 20.0.1, 20.0.0

    runs-on:  macos-10.15

    env:
      # crossover source code to be downloaded
      CROSS_OVER_SOURCE_URL: https://media.codeweavers.com/pub/crossover/source/crossover-sources-${{ matrix.CROSS_OVER_VERSION }}.tar.gz
      CROSS_OVER_LOCAL_FILE: crossover-${{ matrix.CROSS_OVER_VERSION }}
      # artifact names
      WINE_INSTALLATION: wine-cx${{ matrix.CROSS_OVER_VERSION }}
      DXVK_INSTALLATION: dxvk-cx${{ matrix.CROSS_OVER_VERSION }}

    steps:

      ############ Prepare Workspace / Environment ##############

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Wine Dependencies
        run: |
          brew install  freetype         \
                        bison            \
                        krb5             \
                        faudio           \
                        sdl2             \
                        gphoto2          \
                        sane-backends    \
                        gst-plugins-base \
                        mpg123           \
                        little-cms2      \
                        libpng           \
                        mingw-w64        \
                        molten-vk

      - name: Add bison & krb5 to $PATH
        run: |
          set -x
          echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
          echo "$(brew --prefix krb5)/bin" >> $GITHUB_PATH

      - name: Download llvm/clang (from previous job)
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TOOLS_INSTALLATION }}
          path: ${{ env.INSTALLROOT }}

      - name: Unpack llvm/clang
        run: |
          set -x
          pushd ${{ env.INSTALLROOT }}
          ls -al
          tar -xvf ${{ env.TOOLS_INSTALLATION }}.tar.gz
          ls -alt
          popd

      - name: Add llvm/clang to $PATH
        run: |
          set -x
          echo "${{ env.INSTALLROOT }}/${{ env.TOOLS_INSTALLATION }}/bin" >> $GITHUB_PATH


      ############ Download and Prepare Source Code ##############

      - name: Get Source
        run:  |
          curl -o ${{ env.CROSS_OVER_LOCAL_FILE }}.tar.gz ${{ env.CROSS_OVER_SOURCE_URL }}

      - name: Extract Source
        run:  |
          tar xf ${{ env.CROSS_OVER_LOCAL_FILE }}.tar.gz

      - name: Patch Add missing distversion.h
        # Patch provided by Josh Dubois, CrossOver product manager, CodeWeavers.
        run: |
          pushd sources/wine
          patch -p1 < ${{ github.workspace }}/distversion.patch
          popd

      - name: Patch ntdll/wcstring.c to prevent crash if a nullptr is supplied to the function
        # Hack by dasmy
        if: startsWith(matrix.CROSS_OVER_VERSION, '20')
        run: |
          pushd sources/wine
          patch -p1 < ${{ github.workspace }}/wcstring.patch
          popd

      - name: Patch msvcrt to export the missing sincos function
        # https://github.com/wine-mirror/wine/commit/f0131276474997b9d4e593bbf8c5616b879d3bd5
        if: startsWith(matrix.CROSS_OVER_VERSION, '20')
        run: |
          pushd sources/wine
          patch -p1 < ${{ github.workspace }}/msvcrt-sincos.patch
          popd

      ############ Build MoltenVK ##############
      - name: Build MoltenVK
        if: startsWith(matrix.CROSS_OVER_VERSION, '21')
        run: |
          pushd sources/moltenvk
          ./fetchDependencies --macos
          make macos
          popd

      ############ Build DXVK ##############
      - name: Patch DXVK to add missing <ostream> include
        if: startsWith(matrix.CROSS_OVER_VERSION, '20')
        run: patch sources/dxvk/src/util/rc/util_rc_ptr.h < dxvk_util_rc_ptr.patch

      - name: Patch DXVK to remove duplicate definition of D3D11_FORMAT_SUPPORT2
        if: startsWith(matrix.CROSS_OVER_VERSION, '2')
        run: patch sources/dxvk/src/d3d11/d3d11_include.h < dxvk_d3d11_include_h.patch

      - name: Install Dependencies for DXVK
        run: |
          brew install  coreutils \
                        meson     \
                        glslang

      - name: Build DXVK
        if: startsWith(matrix.CROSS_OVER_VERSION, '2')
        run: |
          set -x
          PATH="$(brew --prefix coreutils)/libexec/gnubin:${PATH}" ${{ env.DXVK_BUILDSCRIPT }} master ${{ env.INSTALLROOT }}/${{ env.DXVK_INSTALLATION }} --no-package

      - name: Tar DXVK
        if: startsWith(matrix.CROSS_OVER_VERSION, '2')
        run: |
          set -x
          pushd ${{ env.INSTALLROOT }}
          tar -czf ${{ env.DXVK_INSTALLATION }}.tar.gz ${{ env.DXVK_INSTALLATION }}
          popd

      - name: Upload DXVK
        if: startsWith(matrix.CROSS_OVER_VERSION, '2')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DXVK_INSTALLATION }}
          path: ${{ env.INSTALLROOT }}/${{ env.DXVK_INSTALLATION }}.tar.gz

      ############ Build VKD3D ##############
      - name: Build VKD3D
        if: startsWith(matrix.CROSS_OVER_VERSION, '21')
        run: |
          brew install  automake \
                        bison \
                        flex \
                        pkgconfig
          export PATH="$(brew --prefix bison)/bin":${PATH}
          export PATH="$(brew --prefix flex)/bin":${PATH}

          pushd sources/vkd3d

          ./autogen.sh

          ln -s $(brew --prefix mingw-w64)/toolchain-x86_64/bin/x86_64-w64-mingw32-widl ./bin/widl
          export PATH=./bin:$PATH

          CPPFLAGS="-I ../moltenvk/Package/Latest/MoltenVK/include/ -I ../moltenvk/External/glslang/External/spirv-tools/external/spirv-headers/include/" ./configure --without-ncurses
          make -j
          make install
          popd

      ############ Configure 64bit Version ##############

      - name: Configure wine64 (specific to 21)
        if: startsWith(matrix.CROSS_OVER_VERSION, '21')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine64"
          build-dir: "${{ env.BUILDROOT }}/wine64"
          crossflags: "-g -O2"
          configure-params: "--enable-win64 --with-vulkan --with-vkd3d"

      - name: Configure wine64 (specific to 22)
        if: startsWith(matrix.CROSS_OVER_VERSION, '20')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine64"
          build-dir: "${{ env.BUILDROOT }}/wine64"
          crossflags: "-g -O2"
          configure-params: "--enable-win64 --with-vulkan"

      - name: Configure wine64 (specific to 19)
        if: startsWith(matrix.CROSS_OVER_VERSION, '19')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine64"
          build-dir: "${{ env.BUILDROOT }}/wine64"
          crossflags: "-g -O2 -fcommon"
          configure-params: "--enable-win64 --with-vulkan"

      ############ Build 64bit Version ##############

      - name: Build wine64
        uses: ./.github/actions/make
        with:
          build-dir: "${{ env.BUILDROOT }}/wine64"

      ############ Configure 32on64bit Version ##############

      - name: Configure wine32on64 (specific to 2x)
        if: startsWith(matrix.CROSS_OVER_VERSION, '2')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine32on64"
          build-dir: "${{ env.BUILDROOT }}/wine32on64"
          crossflags: "-g -O2"
          configure-params: "--enable-win32on64 --with-wine64=${{ env.BUILDROOT }}/wine64 --without-cms --without-gstreamer --without-gphoto --without-sane --without-krb5 --disable-winedbg --without-vkd3d --without-vulkan --disable-vulkan_1 --disable-winevulkan"

      - name: Configure wine32on64 (specific to 19)
        if: startsWith(matrix.CROSS_OVER_VERSION, '19')
        uses: ./.github/actions/configure_wine
        with:
          winearch: "wine32on64"
          build-dir: "${{ env.BUILDROOT }}/wine32on64"
          crossflags: "-g -O2 -fcommon"
          configure-params: "--enable-win32on64 --with-wine64=${{ env.BUILDROOT }}/wine64 --without-cms --without-gstreamer --without-gphoto --without-sane --without-krb5 --disable-winedbg --without-vkd3d --without-vulkan --disable-vulkan_1 --disable-winevulkan"

      ############ Build 32on64bit Version ##############

      - name: Build wine32on64
        uses: ./.github/actions/make
        with:
          build-dir: "${{ env.BUILDROOT }}/wine32on64"

      ############ Install wine ##############

      - name: Install wine32on64
        uses: ./.github/actions/install
        with:
          build-dir: "${{ env.BUILDROOT }}/wine32on64"
          install-dir: "${{ env.INSTALLROOT }}/${{ env.WINE_INSTALLATION }}"

      - name: Install wine64
        uses: ./.github/actions/install
        with:
          build-dir: "${{ env.BUILDROOT }}/wine64"
          install-dir: "${{ env.INSTALLROOT }}/${{ env.WINE_INSTALLATION }}"

      ############ Bundle and Upload Deliverable ##############

      - name: Tar Wine
        run: |
          set -x
          pushd ${{ env.INSTALLROOT }}
          tar -czvf ${{ env.WINE_INSTALLATION }}.tar.gz ${{ env.WINE_INSTALLATION }}
          popd

      - name: Upload Wine
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.WINE_INSTALLATION }}
          path: ${{ env.INSTALLROOT }}/${{ env.WINE_INSTALLATION }}.tar.gz
